#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 841)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'75,77,375,324,60,70,144,71,-271,114,-143,-269,280,165,459,462,376,144',
'390,-257,438,-266,438,116,20,119,322,113,115,145,51,439,54,281,66,12',
'386,58,43,46,145,53,44,10,11,325,166,61,19,118,-271,45,-143,-269,17',
'18,-142,98,99,101,100,-257,82,-266,96,97,75,77,52,393,167,95,42,78,394',
'80,81,79,395,-141,59,48,67,68,62,63,64,65,55,-184,-184,57,75,77,69,186',
'60,70,-142,71,102,114,-140,301,183,434,302,433,434,181,433,-179,-179',
'134,135,116,20,119,370,113,115,-141,51,359,54,303,66,137,401,58,43,46',
'280,53,44,-183,-183,316,317,61,19,118,94,45,-140,284,17,18,280,98,99',
'101,100,281,82,403,96,97,-182,-182,52,284,94,95,42,78,385,80,81,281',
'384,-138,59,48,67,68,62,63,64,65,55,-181,-181,57,75,77,69,86,60,70,251',
'71,102,114,134,135,305,304,-180,-180,-181,-181,-182,-182,-183,-183,410',
'116,20,119,126,113,115,-138,51,411,54,252,66,12,322,58,43,46,84,53,44',
'10,11,269,323,61,19,118,414,45,268,374,17,18,94,132,417,101,100,125',
'82,94,96,97,-178,-178,52,127,126,95,42,78,270,80,81,280,-184,-184,59',
'48,67,68,62,63,64,65,55,370,284,57,75,77,69,86,60,70,281,71,102,132',
'280,-178,-178,125,128,129,130,131,148,265,273,127,424,284,20,425,426',
'427,280,371,51,281,54,148,66,12,157,58,43,46,431,53,44,10,11,314,370',
'61,19,435,437,45,94,366,17,18,94,262,128,129,130,131,82,303,447,363',
'149,450,52,264,126,322,42,78,265,80,81,265,262,297,59,48,67,68,62,63',
'64,65,55,454,148,57,75,77,69,296,60,70,456,71,483,132,322,361,387,125',
'322,358,420,330,354,352,351,127,126,465,20,437,467,262,468,469,51,470',
'54,322,66,12,262,58,43,46,474,53,44,10,11,475,476,61,19,477,478,45,479',
'132,17,18,94,125,128,129,130,131,82,272,86,127,487,488,52,83,490,491',
'42,78,492,80,81,354,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70',
',71,481,,128,129,130,131,,,,,,,,,126,,20,,,,126,,51,,54,,66,12,,58,43',
'46,,53,44,10,11,,,61,19,,,45,,132,17,18,,125,,132,,,82,125,,127,,,52',
',,127,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70',
',71,473,114,128,129,130,131,,,128,129,130,131,,,,116,20,119,126,113',
'115,122,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,118,,45,,,17,18',
',132,,101,100,125,82,,96,97,,,52,127,126,95,42,78,,80,81,,,,59,48,67',
'68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,102,132,,,,125,128,129,130',
'131,,,,127,126,,20,,,,-256,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61',
'19,,,45,,132,17,18,,125,128,129,130,131,82,,,127,,,52,,-256,,42,78,',
'80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,114,128',
'129,130,131,,,,,,,,126,,116,20,119,126,113,115,,51,,54,,66,12,,58,43',
'46,,53,44,10,11,,,61,19,118,,45,132,,17,18,125,132,,,,125,82,,127,,',
',52,127,,95,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,128,129,130,131,,128,129,130,131,,,,126,,,20,,,,,,51,,54',
',66,137,,58,43,46,,53,44,,,,,61,19,,,45,132,,17,18,125,,,,,,82,,127',
',,,52,87,88,89,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77',
'69,,60,70,,71,,128,129,130,131,,,,,75,77,,,167,,,20,,90,92,91,93,51',
',54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,165,,,162,,,82,75',
'77,,,167,52,,,,42,78,,80,81,,,82,59,48,67,68,62,63,64,65,55,166,78,57',
'75,77,69,,60,70,,71,,114,165,,,162,,,,75,77,,,167,,116,20,119,,113,115',
',51,,54,82,66,137,,58,43,46,,53,44,166,78,,,61,19,118,,45,,,17,18,165',
',,162,,,82,75,77,,,167,52,,,95,42,78,,80,81,,,82,59,48,67,68,62,63,64',
'65,55,166,78,57,75,77,69,,60,70,,71,,114,165,,,162,,,,,,,,,,116,20,119',
',113,115,,51,,54,82,66,137,,58,43,46,,53,44,166,78,,,61,19,118,,45,',
',17,18,,,,,,,82,,96,97,,,52,,,95,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,114,60,70,,71,,114,,,,,,,,116,,119,,113,115,116',
'20,119,,113,115,,51,,54,,66,137,,58,43,46,,53,44,118,,,,61,19,118,,45',
',,17,18,,,96,97,,,82,,,95,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63',
'64,65,55,,,57,75,77,69,,60,70,,71,,114,,,,,,,,,,,,,,116,20,119,,113',
'115,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,118,,45,,,17,18,,',
',,,,82,,96,97,,,52,,,95,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,',
',57,75,77,69,,60,70,,71,,114,,,,,,,,,,,,,,116,20,119,,113,115,,51,,54',
',66,12,,58,43,46,,53,44,10,11,,,61,19,118,,45,,,17,18,,,,,,,82,,,,,',
'52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70',
',71,,,,,,,,,,,,,,,,,20,143,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11',
',,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,114,,,,,,,,,,,,,,116,20,119',
',113,115,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,118,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,114,60,70,,71,,,,,,,,,,116,,119,,113,115,,20,,,,,,51,,54',
',66,137,,58,43,46,,53,44,118,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61',
'19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63',
'64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66',
'137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78',
',80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,',
',,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43',
'46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,',
',59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,',
',20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,',
',,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75',
'77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53',
'44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,440,,,,,,,,,,,,,,,',
'20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,',
',82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77',
'69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44',
'10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48',
'67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,',
',,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,',
',,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60',
'70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61',
'19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63',
'64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66',
'137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78',
',80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,',
',,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43',
'46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,',
',59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,',
',20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,',
',,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77',
'69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44',
',,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67',
'68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,170',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61',
'19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63',
'64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,286,,,,,51,,54',
',66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,174,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,',
',61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,',
'52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70',
',71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61',
'19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63',
'64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66',
'12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42',
'78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,185,,',
',,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45',
',,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65',
'55,,,57,75,77,69,,60,70,,71,396,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12',
',58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78',
',80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,',
',,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45',
',,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65',
'55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,',
'58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43',
'46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81',
',,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,',
',,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46',
',53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,',
',,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,',
',,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46',
',53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,',
',,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,',
',,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46',
',53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,',
',,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,',
',,20,,,,,,203,221,213,222,66,215,224,216,43,201,,205,199,,,,,61,19,225',
'220,200,,,17,198,,,,,,,82,,,,,223,204,,,,42,78,,80,81,,,,217,202,218',
'219,208,209,210,211,214,226,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,',
'20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,',
',82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77',
'69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44',
',,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67',
'68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46',
',53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20',
',,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,',
',,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46',
',53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20',
',,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,',
',,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,248,42,78',
',80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,',
',,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,,60,70,,71,380,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58',
'43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,378,,,,,,',
',,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,',
',17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55',
',,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58',
'43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81',
',,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,',
',,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,',
',,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75',
'77,69,,60,70,,71,368,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46',
',53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,',
',,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,',
',,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46',
',53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20',
',,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10',
'11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67',
'68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,323,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43',
'46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,',
',59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,174,,,,,,,,,,,',
',,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46',
',53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,',
',,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,294,,,,,,,,,,',
',,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,,60,70,172,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58',
'43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,114,59,48,67,68,62,63,64,65,55,,,57,,116,69,119,,113,115,114,,',
',,,,,,,,,110,105,116,,119,,113,115,118,106,108,107,109,,,,98,99,101',
'100,103,104,,96,97,,,,118,,95,,112,111,,,98,99,101,100,103,104,,96,97',
',,,,114,95,287,,,,,,,,102,,110,105,116,,119,,113,115,,106,108,107,109',
',,,,,102,,,,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,,96,97,114',
',288,,,95,,,,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,',
'102,,,,,,118,,,,112,111,,,98,99,101,100,103,104,,96,97,114,,289,,,95',
',,,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,102,,,,,,118',
',,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116',
',119,114,113,115,,106,108,107,109,,,,,,105,116,,119,,113,115,102,106',
',118,,,,112,111,,,98,99,101,100,103,104,,96,97,118,,,,,95,,114,98,99',
'101,100,103,104,,96,97,,,110,105,116,95,119,,113,115,,106,108,107,109',
',,102,,,,,,,,,,,,,118,,,,102,114,,,98,99,101,100,103,104,,96,97,110',
'105,116,,119,95,113,115,,106,108,107,109,,,,,,,,,,,,,,,,118,,,,112,111',
'102,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113',
'115,,106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101,100',
'103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108,107',
'109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101,100,103,104,114,96',
'97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,,',
',102,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110',
'105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112',
'111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113',
'115,,106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101,100',
'103,104,114,96,97,,,,,,95,,,,110,105,116,355,119,114,113,115,,106,108',
'107,109,,,,,,,116,,119,,113,115,102,,,118,,,,112,111,,,98,99,101,100',
'103,104,,96,97,118,,,,,95,,114,98,99,101,100,103,104,,96,97,,,,105,116',
'95,119,,113,115,,106,,,,,,102,,,,,,,,,,,,,118,,,,102,,,,98,99,101,100',
'103,104,114,96,97,,,326,,,95,,,,110,105,116,,119,,113,115,,106,108,107',
'109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101,100,103,104,114,96',
'97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,,',
',102,,,118,,,,112,111,,114,98,99,101,100,103,104,,96,97,,,110,105,116',
'95,119,,113,115,,106,108,107,109,,,,,,,,,,,,,,,,118,,,,102,111,,,98',
'99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,114,113,115',
',106,108,107,109,,,,,,105,116,,119,,113,115,102,106,,118,,,,112,111',
',,98,99,101,100,103,104,,96,97,118,,,,,95,,114,98,99,101,100,103,104',
',96,97,,,,105,116,95,119,,113,115,,106,,,,,,102,,,,,,,,,,,,,118,,,,102',
'114,,,98,99,101,100,103,104,,96,97,110,105,116,320,119,95,113,115,,106',
'108,107,109,,,,,,,,,,,,,,,,118,,,,112,111,102,,98,99,101,100,103,104',
'114,96,97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,',
',,,,,,,,102,,,118,,,,112,111,,,98,99,101,100,103,104,,96,97,,342,221',
'341,222,95,339,224,343,,332,,338,340,,,316,317,,,225,220,344,,,,337',
',,,,,,,102,,,,223,345,,,,,,,,,,,,348,346,349,347,333,334,335,336,350',
'226,342,221,341,222,,339,224,343,,332,,338,340,,,,,,,225,220,344,,,',
'337,,,,,,,,,,,,223,345,,,,,,,,,,,,348,346,349,347,333,334,335,336,350',
'226,342,221,341,222,,339,224,343,,332,,338,340,,,,,,,225,220,344,,,',
'337,,,,,,,,,,,,223,345,,,,,,,,,,,,348,346,349,347,333,334,335,336,350',
'226,342,221,341,222,,339,224,343,,332,,338,340,,,,,,,225,220,344,,,',
'337,,,,,,,,,,,,223,345,,,,,,,,,,,,348,346,349,347,333,334,335,336,350',
'226,342,221,341,222,,339,224,343,,332,,338,340,,,,,,,225,220,344,,,',
'337,,,,,,,,,,,,223,345,,,,,,,,,,,,348,346,349,347,333,334,335,336,350',
'226,342,221,341,222,,339,224,343,,332,,338,340,,,,,,,225,220,344,,,',
'337,,,,,,,,,,,,223,345,,,,,,,,,,,,348,346,349,347,333,334,335,336,350',
'226' ]
        racc_action_table = arr = ::Array.new(9987, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,285,212,0,0,48,0,218,236,211,219,282,297,421,430,285,202,295,199',
'430,200,381,236,0,236,197,236,236,48,0,381,0,282,0,0,292,0,0,0,202,0',
'0,0,0,212,297,0,0,236,218,0,211,219,0,0,210,236,236,236,236,199,0,200',
'236,236,181,181,0,298,181,236,0,0,299,0,0,0,300,209,0,0,0,0,0,0,0,0',
'0,211,211,0,476,476,0,83,476,476,210,476,236,235,208,173,79,431,173',
'431,378,78,378,60,60,56,56,235,476,235,313,235,235,209,476,262,476,318',
'476,476,319,476,476,476,262,476,476,210,210,401,401,476,476,235,195',
'476,208,262,476,476,370,235,235,235,235,262,476,321,235,235,209,209',
'476,370,194,235,476,476,291,476,476,370,290,201,476,476,476,476,476',
'476,476,476,476,208,208,476,4,4,476,85,4,4,116,4,235,231,16,16,178,178',
'61,61,62,62,63,63,64,64,327,231,4,231,133,231,231,201,4,329,4,117,4',
'4,331,4,4,4,4,4,4,4,4,145,337,4,4,231,353,4,145,283,4,4,193,133,356',
'231,231,133,4,192,231,231,201,201,4,133,217,231,4,4,145,4,4,148,65,65',
'4,4,4,4,4,4,4,4,4,360,148,4,468,468,4,187,468,468,148,468,231,217,183',
'46,46,217,133,133,133,133,363,142,148,217,365,183,468,366,367,369,281',
'280,468,183,468,143,468,468,57,468,468,468,377,468,468,468,468,183,274',
'468,468,379,380,468,120,270,468,468,121,123,217,217,217,217,468,176',
'388,266,50,400,468,140,358,402,468,468,171,468,468,169,168,160,468,468',
'468,468,468,468,468,468,468,409,49,468,467,467,468,158,467,467,413,467',
'467,358,416,263,293,358,422,260,358,250,257,256,254,358,59,434,467,435',
'437,155,439,442,467,445,467,446,467,467,154,467,467,467,449,467,467',
'467,467,452,453,467,467,458,460,467,461,59,467,467,8,59,358,358,358',
'358,467,147,5,59,471,472,467,1,480,482,467,467,484,467,467,489,,,467',
'467,467,467,467,467,467,467,467,,,467,465,465,467,,465,465,,465,465',
',59,59,59,59,,,,,,,,,54,,465,,,,156,,465,,465,,465,465,,465,465,465',
',465,465,465,465,,,465,465,,,465,,54,465,465,,54,,156,,,465,156,,54',
',,465,,,156,465,465,,465,465,,,,465,465,465,465,465,465,465,465,465',
',,465,447,447,465,,447,447,,447,447,230,54,54,54,54,,,156,156,156,156',
',,,230,447,230,12,230,230,12,447,,447,,447,447,,447,447,447,,447,447',
'447,447,,,447,447,230,,447,,,447,447,,12,,230,230,12,447,,230,230,,',
'447,12,137,230,447,447,,447,447,,,,447,447,447,447,447,447,447,447,447',
',,447,10,10,447,,10,10,,10,230,137,,,,137,12,12,12,12,,,,137,215,,10',
',,,215,,10,,10,,10,10,,10,10,10,,10,10,10,10,,,10,10,,,10,,215,10,10',
',215,137,137,137,137,10,,,215,,,10,,215,,10,10,,10,10,,,,10,10,10,10',
'10,10,10,10,10,,,10,11,11,10,,11,11,,11,,228,215,215,215,215,,,,,,,',
'214,,228,11,228,213,228,228,,11,,11,,11,11,,11,11,11,,11,11,11,11,,',
'11,11,228,,11,214,,11,11,214,213,,,,213,11,,214,,,,11,213,,228,11,11',
',11,11,,,,11,11,11,11,11,11,11,11,11,,,11,438,438,11,,438,438,,438,',
'214,214,214,214,,213,213,213,213,,,,55,,,438,,,,,,438,,438,,438,438',
',438,438,438,,438,438,,,,,438,438,,,438,55,,438,438,55,,,,,,438,,55',
',,,438,7,7,7,438,438,,438,438,,,,438,438,438,438,438,438,438,438,438',
',,438,433,433,438,,433,433,,433,,55,55,55,55,,,,,296,296,,,296,,,433',
',7,7,7,7,433,,433,,433,433,,433,433,433,,433,433,,,,,433,433,,,433,',
',433,433,296,,,296,,,433,390,390,,,390,433,,,,433,433,,433,433,,,296',
'433,433,433,433,433,433,433,433,433,296,296,433,17,17,433,,17,17,,17',
',229,390,,,390,,,,58,58,,,58,,229,17,229,,229,229,,17,,17,390,17,17',
',17,17,17,,17,17,390,390,,,17,17,229,,17,,,17,17,58,,,58,,,17,216,216',
',,216,17,,,229,17,17,,17,17,,,58,17,17,17,17,17,17,17,17,17,58,58,17',
'18,18,17,,18,18,,18,,234,216,,,216,,,,,,,,,,234,18,234,,234,234,,18',
',18,216,18,18,,18,18,18,,18,18,216,216,,,18,18,234,,18,,,18,18,,,,,',
',18,,234,234,,,18,,,234,18,18,,18,18,,,,18,18,18,18,18,18,18,18,18,',
',18,19,19,18,232,19,19,,19,,139,,,,,,,,232,,232,,232,232,139,19,139',
',139,139,,19,,19,,19,19,,19,19,19,,19,19,232,,,,19,19,139,,19,,,19,19',
',,232,232,,,19,,,232,,,19,,,,19,19,,19,19,,,,19,19,19,19,19,19,19,19',
'19,,,19,20,20,19,,20,20,,20,,233,,,,,,,,,,,,,,233,20,233,,233,233,,20',
',20,,20,20,,20,20,20,,20,20,20,20,,,20,20,233,,20,,,20,20,,,,,,,20,',
'233,233,,,20,,,233,20,20,,20,20,,,,20,20,20,20,20,20,20,20,20,,,20,425',
'425,20,,425,425,,425,,136,,,,,,,,,,,,,,136,425,136,,136,136,,425,,425',
',425,425,,425,425,425,,425,425,425,425,,,425,425,136,,425,,,425,425',
',,,,,,425,,,,,,425,,,,425,425,,425,425,,,,425,425,425,425,425,425,425',
'425,425,,,425,47,47,425,,47,47,,47,,,,,,,,,,,,,,,,,47,47,,,,,47,,47',
',47,47,,47,47,47,,47,47,47,47,,,47,47,,,47,,,47,47,,,,,,,47,,,,,,47',
',,,47,47,,47,47,,,,47,47,47,47,47,47,47,47,47,,,47,417,417,47,,417,417',
',417,,138,,,,,,,,,,,,,,138,417,138,,138,138,,417,,417,,417,417,,417',
'417,417,,417,417,417,417,,,417,417,138,,417,,,417,417,,,,,,,417,,,,',
',417,,,,417,417,,417,417,,,,417,417,417,417,417,417,417,417,417,,,417',
'410,410,417,227,410,410,,410,,,,,,,,,,227,,227,,227,227,,410,,,,,,410',
',410,,410,410,,410,410,410,,410,410,227,,,,410,410,,,410,,,410,410,',
',,,,,410,,,,,,410,,,,410,410,,410,410,,,,410,410,410,410,410,410,410',
'410,410,,,410,393,393,410,,393,393,,393,,,,,,,,,,,,,,,,,393,,,,,,393',
',393,,393,393,,393,393,393,,393,393,393,393,,,393,393,,,393,,,393,393',
',,,,,,393,,,,,,393,,,,393,393,,393,393,,,,393,393,393,393,393,393,393',
'393,393,,,393,51,51,393,,51,51,,51,,,,,,,,,,,,,,,,,51,,,,,,51,,51,,51',
'51,,51,51,51,,51,51,,,,,51,51,,,51,,,51,51,,,,,,,51,,,,,,51,,,,51,51',
',51,51,,,,51,51,51,51,51,51,51,51,51,,,51,52,52,51,,52,52,,52,,,,,,',
',,,,,,,,,,52,,,,,,52,,52,,52,52,,52,52,52,,52,52,,,,,52,52,,,52,,,52',
'52,,,,,,,52,,,,,,52,,,,52,52,,52,52,,,,52,52,52,52,52,52,52,52,52,,',
'52,53,53,52,,53,53,,53,,,,,,,,,,,,,,,,,53,,,,,,53,,53,,53,53,,53,53',
'53,,53,53,,,,,53,53,,,53,,,53,53,,,,,,,53,,,,,,53,,,,53,53,,53,53,,',
',53,53,53,53,53,53,53,53,53,,,53,385,385,53,,385,385,,385,,,,,,,,,,',
',,,,,,385,,,,,,385,,385,,385,385,,385,385,385,,385,385,385,385,,,385',
'385,,,385,,,385,385,,,,,,,385,,,,,,385,,,,385,385,,385,385,,,,385,385',
'385,385,385,385,385,385,385,,,385,384,384,385,,384,384,,384,,,,,,,,',
',,,,,,,,384,,,,,,384,,384,,384,384,,384,384,384,,384,384,384,384,,,384',
'384,,,384,,,384,384,,,,,,,384,,,,,,384,,,,384,384,,384,384,,,,384,384',
'384,384,384,384,384,384,384,,,384,382,382,384,,382,382,,382,382,,,,',
',,,,,,,,,,,382,,,,,,382,,382,,382,382,,382,382,382,,382,382,,,,,382',
'382,,,382,,,382,382,,,,,,,382,,,,,,382,,,,382,382,,382,382,,,,382,382',
'382,382,382,382,382,382,382,,,382,375,375,382,,375,375,,375,,,,,,,,',
',,,,,,,,375,,,,,,375,,375,,375,375,,375,375,375,,375,375,375,375,,,375',
'375,,,375,,,375,375,,,,,,,375,,,,,,375,,,,375,375,,375,375,,,,375,375',
'375,375,375,375,375,375,375,,,375,374,374,375,,374,374,,374,,,,,,,,',
',,,,,,,,374,,,,,,374,,374,,374,374,,374,374,374,,374,374,,,,,374,374',
',,374,,,374,374,,,,,,,374,,,,,,374,,,,374,374,,374,374,,,,374,374,374',
'374,374,374,374,374,374,,,374,371,371,374,,371,371,,371,,,,,,,,,,,,',
',,,,371,,,,,,371,,371,,371,371,,371,371,371,,371,371,,,,,371,371,,,371',
',,371,371,,,,,,,371,,,,,,371,,,,371,371,,371,371,,,,371,371,371,371',
'371,371,371,371,371,,,371,354,354,371,,354,354,,354,,,,,,,,,,,,,,,,',
'354,,,,,,354,,354,,354,354,,354,354,354,,354,354,,,,,354,354,,,354,',
',354,354,,,,,,,354,,,,,,354,,,,354,354,,354,354,,,,354,354,354,354,354',
'354,354,354,354,,,354,330,330,354,,330,330,,330,,,,,,,,,,,,,,,,,330',
',,,,,330,,330,,330,330,,330,330,330,,330,330,,,,,330,330,,,330,,,330',
'330,,,,,,,330,,,,,,330,,,,330,330,,330,330,,,,330,330,330,330,330,330',
'330,330,330,,,330,326,326,330,,326,326,,326,,,,,,,,,,,,,,,,,326,,,,',
',326,,326,,326,326,,326,326,326,,326,326,,,,,326,326,,,326,,,326,326',
',,,,,,326,,,,,,326,,,,326,326,,326,326,,,,326,326,326,326,326,326,326',
'326,326,,,326,325,325,326,,325,325,,325,,,,,,,,,,,,,,,,,325,,,,,,325',
',325,,325,325,,325,325,325,,325,325,,,,,325,325,,,325,,,325,325,,,,',
',,325,,,,,,325,,,,325,325,,325,325,,,,325,325,325,325,325,325,325,325',
'325,,,325,324,324,325,,324,324,,324,,,,,,,,,,,,,,,,,324,,,,,,324,,324',
',324,324,,324,324,324,,324,324,,,,,324,324,,,324,,,324,324,,,,,,,324',
',,,,,324,,,,324,324,,324,324,,,,324,324,324,324,324,324,324,324,324',
',,324,323,323,324,,323,323,,323,,,,,,,,,,,,,,,,,323,,,,,,323,,323,,323',
'323,,323,323,323,,323,323,,,,,323,323,,,323,,,323,323,,,,,,,323,,,,',
',323,,,,323,323,,323,323,,,,323,323,323,323,323,323,323,323,323,,,323',
'69,69,323,,69,69,69,69,,,,,,,,,,,,,,,,,69,,,,,,69,,69,,69,69,,69,69',
'69,,69,69,69,69,,,69,69,,,69,,,69,69,,,,,,,69,,,,,,69,,,,69,69,,69,69',
',,,69,69,69,69,69,69,69,69,69,,,69,149,149,69,,149,149,,149,,,,,,,,',
',,,,,,,,149,149,,,,,149,,149,,149,149,,149,149,149,,149,149,149,149',
',,149,149,,,149,,,149,149,,,,,,,149,,,,,,149,,,,149,149,,149,149,,,',
'149,149,149,149,149,149,149,149,149,,,149,71,71,149,,71,71,,71,71,,',
',,,,,,,,,,,,,71,,,,,,71,,71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,',
'71,,,71,71,,,,,,,71,,,,,,71,,,,71,71,,71,71,,,,71,71,71,71,71,71,71',
'71,71,,,71,76,76,71,,76,76,,76,,,,,,,,,,,,,,,,,76,,,,,,76,,76,,76,76',
',76,76,76,,76,76,76,76,,,76,76,,,76,,,76,76,,,,,,,76,,,,,,76,,,,76,76',
',76,76,,,,76,76,76,76,76,76,76,76,76,,,76,308,308,76,,308,308,,308,',
',,,,,,,,,,,,,,,308,,,,,,308,,308,,308,308,,308,308,308,,308,308,308',
'308,,,308,308,,,308,,,308,308,,,,,,,308,,,,,,308,,,,308,308,,308,308',
',,,308,308,308,308,308,308,308,308,308,,,308,303,303,308,,303,303,,303',
',,,,,,,,,,,,,,,,303,,,,,,303,,303,,303,303,,303,303,303,,303,303,303',
'303,,,303,303,,,303,,,303,303,,,,,,,303,,,,,,303,,,,303,303,,303,303',
',,,303,303,303,303,303,303,303,303,303,,,303,81,81,303,,81,81,,81,,',
',,,,,,,,,,,,,,81,,,,,,81,,81,,81,81,,81,81,81,,81,81,,,,,81,81,,,81',
',,81,81,,,,,,,81,,,,,,81,,,,81,81,,81,81,,,,81,81,81,81,81,81,81,81',
'81,,,81,302,302,81,,302,302,,302,302,,,,,,,,,,,,,,,,302,,,,,,302,,302',
',302,302,,302,302,302,,302,302,302,302,,,302,302,,,302,,,302,302,,,',
',,,302,,,,,,302,,,,302,302,,302,302,,,,302,302,302,302,302,302,302,302',
'302,,,302,84,84,302,,84,84,,84,,,,,,,,,,,,,,,,,84,,,,,,84,,84,,84,84',
',84,84,84,,84,84,84,84,,,84,84,,,84,,,84,84,,,,,,,84,,,,,,84,,,,84,84',
',84,84,,,,84,84,84,84,84,84,84,84,84,,,84,289,289,84,,289,289,,289,',
',,,,,,,,,,,,,,,289,,,,,,289,,289,,289,289,,289,289,289,,289,289,,,,',
'289,289,,,289,,,289,289,,,,,,,289,,,,,,289,,,,289,289,,289,289,,,,289',
'289,289,289,289,289,289,289,289,,,289,86,86,289,,86,86,,86,,,,,,,,,',
',,,,,,,86,,,,,,86,,86,,86,86,,86,86,86,,86,86,86,86,,,86,86,,,86,,,86',
'86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86,86,86,86,86,86,86,86,86,,',
'86,87,87,86,,87,87,,87,,,,,,,,,,,,,,,,,87,,,,,,87,,87,,87,87,,87,87',
'87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,,,87,,,,,,87,,,,87,87,,87,87',
',,,87,87,87,87,87,87,87,87,87,,,87,88,88,87,,88,88,,88,,,,,,,,,,,,,',
',,,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,88,88,,,88,88,,,88,,,88,88',
',,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,88,88,88,88,,,88',
'89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,,,,,,89,,89,,89,89,,89,89,89',
',89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89,,89,89,',
',,89,89,89,89,89,89,89,89,89,,,89,90,90,89,,90,90,,90,,,,,,,,,,,,,,',
',,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90,90,,,90,90,,,90,,,90,90',
',,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,90,90,90,90,,,90',
'91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,,,,,,91,,91,,91,91,,91,91,91',
',91,91,91,91,,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91,91,,91,91,',
',,91,91,91,91,91,91,91,91,91,,,91,92,92,91,,92,92,,92,,,,,,,,,,,,,,',
',,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,92,92,,,92,92,,,92,,,92,92',
',,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92,92,92,92,92,92,,,92',
'93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,,,,,,93,,93,,93,93,,93,93,93',
',93,93,93,93,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93,,93,93,',
',,93,93,93,93,93,93,93,93,93,,,93,94,94,93,,94,94,,94,,,,,,,,,,,,,,',
',,94,,,,,,94,94,94,94,94,94,94,94,94,94,,94,94,,,,,94,94,94,94,94,,',
'94,94,,,,,,,94,,,,,94,94,,,,94,94,,94,94,,,,94,94,94,94,94,94,94,94',
'94,94,,94,95,95,94,,95,95,,95,,,,,,,,,,,,,,,,,95,,,,,,95,,95,,95,95',
',95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,,,95,,,,,,95,,,,95,95,,95',
'95,,,,95,95,95,95,95,95,95,95,95,,,95,96,96,95,,96,96,,96,,,,,,,,,,',
',,,,,,96,,,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96',
',,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96,96,96,96,96,96,96,,,96',
'97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,,,,,,97,,97,,97,97,,97,97,97',
',97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97',
'97,97,97,97,97,97,97,97,,,97,98,98,97,,98,98,,98,,,,,,,,,,,,,,,,,98',
',,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98',
',,,,,98,,,,98,98,,98,98,,,,98,98,98,98,98,98,98,98,98,,,98,99,99,98',
',99,99,,99,,,,,,,,,,,,,,,,,99,,,,,,99,,99,,99,99,,99,99,99,,99,99,,',
',,99,99,,,99,,,99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99,,,,99,99,99,99',
'99,99,99,99,99,,,99,100,100,99,,100,100,,100,,,,,,,,,,,,,,,,,100,,,',
',,100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,100',
',,,,,,100,,,,,,100,,,,100,100,,100,100,,,,100,100,100,100,100,100,100',
'100,100,,,100,101,101,100,,101,101,,101,,,,,,,,,,,,,,,,,101,,,,,,101',
',101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,',
',,101,,,,,,101,,,,101,101,,101,101,,,,101,101,101,101,101,101,101,101',
'101,,,101,102,102,101,,102,102,,102,,,,,,,,,,,,,,,,,102,,,,,,102,,102',
',102,102,,102,102,102,,102,102,,,,,102,102,,,102,,,102,102,,,,,,,102',
',,,,,102,,,,102,102,,102,102,,,,102,102,102,102,102,102,102,102,102',
',,102,103,103,102,,103,103,,103,,,,,,,,,,,,,,,,,103,,,,,,103,,103,,103',
'103,,103,103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,,,,103,,,,',
',103,,,,103,103,,103,103,,,,103,103,103,103,103,103,103,103,103,,,103',
'104,104,103,,104,104,,104,,,,,,,,,,,,,,,,,104,,,,,,104,,104,,104,104',
',104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,,,,104,,,,,,104',
',,,104,104,,104,104,,,,104,104,104,104,104,104,104,104,104,,,104,105',
'105,104,,105,105,,105,,,,,,,,,,,,,,,,,105,,,,,,105,,105,,105,105,,105',
'105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,,,,105,,,,,,105,,,,105',
'105,,105,105,,,,105,105,105,105,105,105,105,105,105,,,105,106,106,105',
',106,106,,106,,,,,,,,,,,,,,,,,106,,,,,,106,,106,,106,106,,106,106,106',
',106,106,,,,,106,106,,,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106,',
'106,106,,,,106,106,106,106,106,106,106,106,106,,,106,107,107,106,,107',
'107,,107,,,,,,,,,,,,,,,,,107,,,,,,107,,107,,107,107,,107,107,107,,107',
'107,,,,,107,107,,,107,,,107,107,,,,,,,107,,,,,,107,,,,107,107,,107,107',
',,,107,107,107,107,107,107,107,107,107,,,107,108,108,107,,108,108,,108',
',,,,,,,,,,,,,,,,108,,,,,,108,,108,,108,108,,108,108,108,,108,108,,,',
',108,108,,,108,,,108,108,,,,,,,108,,,,,,108,,,,108,108,,108,108,,,,108',
'108,108,108,108,108,108,108,108,,,108,109,109,108,,109,109,,109,,,,',
',,,,,,,,,,,,109,,,,,,109,,109,,109,109,,109,109,109,,109,109,,,,,109',
'109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109,109,,109,109,,,,109,109',
'109,109,109,109,109,109,109,,,109,110,110,109,,110,110,,110,,,,,,,,',
',,,,,,,,110,,,,,,110,,110,,110,110,,110,110,110,,110,110,,,,,110,110',
',,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,,110,110,,,,110,110,110',
'110,110,110,110,110,110,,,110,111,111,110,,111,111,,111,,,,,,,,,,,,',
',,,,111,,,,,,111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,,,111',
',,111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111,,,,111,111,111,111',
'111,111,111,111,111,,,111,112,112,111,,112,112,,112,,,,,,,,,,,,,,,,',
'112,,,,,,112,,112,,112,112,,112,112,112,,112,112,,,,,112,112,,,112,',
',112,112,,,,,,,112,,,,,,112,,,,112,112,,112,112,,,,112,112,112,112,112',
'112,112,112,112,,,112,113,113,112,,113,113,,113,,,,,,,,,,,,,,,,,113',
',,,,,113,,113,,113,113,,113,113,113,,113,113,,,,,113,113,,,113,,,113',
'113,,,,,,,113,,,,,,113,,,113,113,113,,113,113,,,,113,113,113,113,113',
'113,113,113,113,,,113,114,114,113,,114,114,,114,,,,,,,,,,,,,,,,,114',
',,,,,114,,114,,114,114,,114,114,114,,114,114,,,,,114,114,,,114,,,114',
'114,,,,,,,114,,,,,,114,,,,114,114,,114,114,,,,114,114,114,114,114,114',
'114,114,114,,,114,288,288,114,,288,288,,288,288,,,,,,,,,,,,,,,,288,',
',,,,288,,288,,288,288,,288,288,288,,288,288,288,288,,,288,288,,,288',
',,288,288,,,,,,,288,,,,,,288,,,,288,288,,288,288,,,,288,288,288,288',
'288,288,288,288,288,,,288,287,287,288,,287,287,,287,287,,,,,,,,,,,,',
',,,287,,,,,,287,,287,,287,287,,287,287,287,,287,287,287,287,,,287,287',
',,287,,,287,287,,,,,,,287,,,,,,287,,,,287,287,,287,287,,,,287,287,287',
'287,287,287,287,287,287,,,287,118,118,287,,118,118,,118,,,,,,,,,,,,',
',,,,118,,,,,,118,,118,,118,118,,118,118,118,,118,118,,,,,118,118,,,118',
',,118,118,,,,,,,118,,,,,,118,,,,118,118,,118,118,,,,118,118,118,118',
'118,118,118,118,118,,,118,119,119,118,,119,119,,119,,,,,,,,,,,,,,,,',
'119,,,,,,119,,119,,119,119,,119,119,119,,119,119,,,,,119,119,,,119,',
',119,119,,,,,,,119,,,,,,119,,,,119,119,,119,119,,,,119,119,119,119,119',
'119,119,119,119,,,119,272,272,119,,272,272,,272,272,,,,,,,,,,,,,,,,272',
',,,,,272,,272,,272,272,,272,272,272,,272,272,272,272,,,272,272,,,272',
',,272,272,,,,,,,272,,,,,,272,,,,272,272,,272,272,,,,272,272,272,272',
'272,272,272,272,272,,,272,269,269,272,,269,269,,269,,,,,,,,,,,,,,,,',
'269,,,,,,269,,269,,269,269,,269,269,269,,269,269,269,269,,,269,269,',
',269,,,269,269,,,,,,,269,,,,,,269,,,,269,269,,269,269,,,,269,269,269',
'269,269,269,269,269,269,,,269,122,122,269,,122,122,,122,,,,,,,,,,,,',
',,,,122,,,,,,122,,122,,122,122,,122,122,122,,122,122,,,,,122,122,,,122',
',,122,122,,,,,,,122,,,,,,122,,,,122,122,,122,122,,,,122,122,122,122',
'122,122,122,122,122,,,122,268,268,122,,268,268,,268,,,,,,,,,,,,,,,,',
'268,,,,,,268,,268,,268,268,,268,268,268,,268,268,,,,,268,268,,,268,',
',268,268,,,,,,,268,,,,,,268,,,,268,268,,268,268,,,,268,268,268,268,268',
'268,268,268,268,,,268,265,265,268,,265,265,,265,,,,,,,,,,,,,,,,,265',
',,,,,265,,265,,265,265,,265,265,265,,265,265,265,265,,,265,265,,,265',
',,265,265,,,,,,,265,,,,,,265,,,,265,265,,265,265,,,,265,265,265,265',
'265,265,265,265,265,,,265,248,248,265,,248,248,,248,,,,,,,,,,,,,,,,',
'248,,,,,,248,,248,,248,248,,248,248,248,,248,248,,,,,248,248,,,248,',
',248,248,,,,,,,248,,,,,,248,,,,248,248,,248,248,,,,248,248,248,248,248',
'248,248,248,248,,,248,205,205,248,,205,205,,205,,,,,,,,,,,,,,,,,205',
',,,,,205,,205,,205,205,,205,205,205,,205,205,,,,,205,205,,,205,,,205',
'205,,,,,,,205,,,,,,205,,,,205,205,,205,205,,,,205,205,205,205,205,205',
'205,205,205,,,205,204,204,205,,204,204,,204,,,,,,,,,,,,,,,,,204,,,,',
',204,,204,,204,204,,204,204,204,,204,204,,,,,204,204,,,204,,,204,204',
',,,,,,204,,,,,,204,,,,204,204,,204,204,,,,204,204,204,204,204,204,204',
'204,204,,,204,203,203,204,,203,203,,203,,,,,,,,,,,,,,,,,203,,,,,,203',
',203,,203,203,,203,203,203,,203,203,,,,,203,203,,,203,,,203,203,,,,',
',,203,,,,,,203,,,,203,203,,203,203,,,,203,203,203,203,203,203,203,203',
'203,,,203,198,198,203,,198,198,,198,,,198,,,,,,,,,,,,,,198,,,,,,198',
',198,,198,198,,198,198,198,,198,198,,,,,198,198,,,198,,,198,198,,,,',
',,198,,,,,,198,,,,198,198,,198,198,,,,198,198,198,198,198,198,198,198',
'198,,,198,185,185,198,,185,185,,185,185,,,,,,,,,,,,,,,,185,,,,,,185',
',185,,185,185,,185,185,185,,185,185,185,185,,,185,185,,,185,,,185,185',
',,,,,,185,,,,,,185,,,,185,185,,185,185,,,,185,185,185,185,185,185,185',
'185,185,,,185,182,182,185,,182,182,,182,,,,,,,,,,,,,,,,,182,,,,,,182',
',182,,182,182,,182,182,182,,182,182,182,182,,,182,182,,,182,,,182,182',
',,,,,,182,,,,,,182,,,,182,182,,182,182,,,,182,182,182,182,182,182,182',
'182,182,,,182,157,157,182,,157,157,,157,157,,,,,,,,,,,,,,,,157,,,,,',
'157,,157,,157,157,,157,157,157,,157,157,157,157,,,157,157,,,157,,,157',
'157,,,,,,,157,,,,,,157,,,,157,157,,157,157,,,,157,157,157,157,157,157',
'157,157,157,,,157,70,70,157,,70,70,70,70,,,,,,,,,,,,,,,,,70,,,,,,70',
',70,,70,70,,70,70,70,,70,70,70,70,,,70,70,,,70,,,70,70,,,,,,,70,,,,',
',70,,,,70,70,,70,70,,,237,70,70,70,70,70,70,70,70,70,,,70,,237,70,237',
',237,237,249,,,,,,,,,,,,249,249,249,,249,,249,249,237,249,249,249,249',
',,,237,237,237,237,237,237,,237,237,,,,249,,237,,249,249,,,249,249,249',
'249,249,249,,249,249,,,,,150,249,150,,,,,,,,237,,150,150,150,,150,,150',
'150,,150,150,150,150,,,,,,249,,,,,,,,,,150,,,,150,150,,,150,150,150',
'150,150,150,,150,150,152,,152,,,150,,,,,,,152,152,152,,152,,152,152',
',152,152,152,152,,,,,,,,,,150,,,,,,152,,,,152,152,,,152,152,152,152',
'152,152,,152,152,153,,153,,,152,,,,,,,153,153,153,,153,,153,153,,153',
'153,153,153,,,,,,,,,,152,,,,,,153,,,,153,153,,,153,153,153,153,153,153',
'9,153,153,,,,,,153,,,,9,9,9,,9,242,9,9,,9,9,9,9,,,,,,242,242,,242,,242',
'242,153,242,,9,,,,9,9,,,9,9,9,9,9,9,,9,9,242,,,,,9,,243,242,242,242',
'242,242,242,,242,242,,,243,243,243,242,243,,243,243,,243,243,243,243',
',,9,,,,,,,,,,,,,243,,,,242,429,,,243,243,243,243,243,243,,243,243,429',
'429,429,,429,243,429,429,,429,429,429,429,,,,,,,,,,,,,,,,429,,,,429',
'429,243,,429,429,429,429,429,429,412,429,429,,,,,,429,,,,412,412,412',
',412,,412,412,,412,412,412,412,,,,,,,,,,,,,429,,,412,,,,412,412,,,412',
'412,412,412,412,412,408,412,412,,,,,,412,,,,408,408,408,,408,,408,408',
',408,408,408,408,,,,,,,,,,,,,412,,,408,,,,408,408,,,408,408,408,408',
'408,408,407,408,408,,,,,,408,,,,407,407,407,,407,,407,407,,407,407,407',
'407,,,,,,,,,,,,,408,,,407,,,,407,407,,,407,407,407,407,407,407,406,407',
'407,,,,,,407,,,,406,406,406,,406,,406,406,,406,406,406,406,,,,,,,,,',
',,,407,,,406,,,,406,406,,,406,406,406,406,406,406,405,406,406,,,,,,406',
',,,405,405,405,,405,,405,405,,405,405,405,405,,,,,,,,,,,,,406,,,405',
',,,405,405,,,405,405,405,405,405,405,258,405,405,,,,,,405,,,,258,258',
'258,258,258,238,258,258,,258,258,258,258,,,,,,,238,,238,,238,238,405',
',,258,,,,258,258,,,258,258,258,258,258,258,,258,258,238,,,,,258,,241',
'238,238,238,238,238,238,,238,238,,,,241,241,238,241,,241,241,,241,,',
',,,258,,,,,,,,,,,,,241,,,,238,,,,241,241,241,241,241,241,245,241,241',
',,245,,,241,,,,245,245,245,,245,,245,245,,245,245,245,245,,,,,,,,,,',
',,241,,,245,,,,245,245,,,245,245,245,245,245,245,364,245,245,,,,,,245',
',,,364,364,364,,364,,364,364,,364,364,364,364,,,,,,,,,,,,,245,,,364',
',,,364,364,,244,364,364,364,364,364,364,,364,364,,,244,244,244,364,244',
',244,244,,244,244,244,244,,,,,,,,,,,,,,,,244,,,,364,244,,,244,244,244',
'244,244,244,253,244,244,,,,,,244,,,,253,253,253,,253,239,253,253,,253',
'253,253,253,,,,,,239,239,,239,,239,239,244,239,,253,,,,253,253,,,253',
'253,253,253,253,253,,253,253,239,,,,,253,,240,239,239,239,239,239,239',
',239,239,,,,240,240,239,240,,240,240,,240,,,,,,253,,,,,,,,,,,,,240,',
',,239,196,,,240,240,240,240,240,240,,240,240,196,196,196,196,196,240',
'196,196,,196,196,196,196,,,,,,,,,,,,,,,,196,,,,196,196,240,,196,196',
'196,196,196,196,184,196,196,,,,,,196,,,,184,184,184,,184,,184,184,,184',
'184,184,184,,,,,,,,,,,,,196,,,184,,,,184,184,,,184,184,184,184,184,184',
',184,184,,322,322,322,322,184,322,322,322,,322,,322,322,,,184,184,,',
'322,322,322,,,,322,,,,,,,,184,,,,322,322,,,,,,,,,,,,322,322,322,322',
'322,322,322,322,322,322,361,361,361,361,,361,361,361,,361,,361,361,',
',,,,,361,361,361,,,,361,,,,,,,,,,,,361,361,,,,,,,,,,,,361,361,361,361',
'361,361,361,361,361,361,386,386,386,386,,386,386,386,,386,,386,386,',
',,,,,386,386,386,,,,386,,,,,,,,,,,,386,386,,,,,,,,,,,,386,386,386,386',
'386,386,386,386,386,386,320,320,320,320,,320,320,320,,320,,320,320,',
',,,,,320,320,320,,,,320,,,,,,,,,,,,320,320,,,,,,,,,,,,320,320,320,320',
'320,320,320,320,320,320,355,355,355,355,,355,355,355,,355,,355,355,',
',,,,,355,355,355,,,,355,,,,,,,,,,,,355,355,,,,,,,,,,,,355,355,355,355',
'355,355,355,355,355,355,252,252,252,252,,252,252,252,,252,,252,252,',
',,,,,252,252,252,,,,252,,,,,,,,,,,,252,252,,,,,,,,,,,,252,252,252,252',
'252,252,252,252,252,252' ]
        racc_action_check = arr = ::Array.new(9987, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   437,   nil,   nil,   182,   419,   nil,   881,   415,  8693,
   642,   734,   572,   nil,   nil,   nil,   103,  1010,  1102,  1194,
  1286,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   196,  1470,   -20,   295,
   316,  1838,  1930,  2022,   476,   843,    22,   303,  1027,   384,
    20,   107,   109,   111,   113,   171,   nil,   nil,   nil,  3218,
  8370,  3402,   nil,   nil,   nil,   nil,  3494,   nil,    33,    33,
   nil,  3770,   nil,    95,  3954,   174,  4138,  4230,  4322,  4414,
  4506,  4598,  4690,  4782,  4874,  4966,  5058,  5150,  5242,  5334,
  5426,  5518,  5610,  5702,  5794,  5886,  5978,  6070,  6162,  6254,
  6346,  6438,  6530,  6622,  6714,   nil,   149,   208,  6990,  7082,
   319,   323,  7358,   307,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   204,   nil,   nil,  1382,   616,  1566,  1198,
   318,   nil,   282,   238,   nil,   220,   nil,   422,   225,  3310,
  8525,   nil,  8582,  8639,   378,   369,   482,  8278,   358,   nil,
   334,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   328,   340,
   nil,   337,   nil,    93,   nil,   nil,   327,   nil,   192,   nil,
   nil,    64,  8186,   250,  9562,  8094,   nil,   266,   nil,   nil,
   nil,   nil,   238,   231,   153,   133,  9508,    13,  8002,     7,
     9,   159,    -9,  7910,  7818,  7726,   nil,   nil,    90,    67,
    44,    -2,    -9,   756,   751,   660,  1073,   248,    -4,    -1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1652,   738,  1014,
   554,   186,  1192,  1290,  1106,    94,     2,  8444,  9143,  9416,
  9463,  9190,  8710,  8757,  9345,  9244,   nil,   nil,  7634,  8464,
   372,   nil,  9895,  9399,   340,   nil,   363,   344,  9126,   nil,
   345,   nil,    96,   370,   nil,  7542,   314,   nil,  7450,  7266,
   280,   nil,  7174,   nil,   309,   nil,   nil,   nil,   nil,   nil,
   289,   268,   -24,   230,   nil,   -11,   nil,  6898,  6806,  4046,
   161,   157,    27,   370,   nil,   -20,   935,   -28,    60,    66,
    70,   nil,  3862,  3678,   nil,   nil,   nil,   nil,  3586,   nil,
   nil,   nil,   nil,   105,   nil,   nil,   nil,   nil,   113,   118,
  9775,   145,  9595,  3126,  3034,  2942,  2850,   193,   nil,   207,
  2758,   207,   nil,   nil,   nil,   nil,   nil,   218,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   224,  2666,  9835,   233,   nil,   340,   nil,
   260,  9655,   nil,   223,  9298,   288,   292,   292,   nil,   232,
   112,  2574,   nil,   nil,  2482,  2390,   nil,   306,    75,   315,
   293,     9,  2298,   nil,  2206,  2114,  9715,   nil,   331,   nil,
   981,   nil,   nil,  1746,   nil,   nil,   nil,   nil,   nil,   nil,
   272,    57,   334,   nil,   nil,  9072,  9018,  8964,  8910,   355,
  1654,   nil,  8856,   364,   nil,   nil,   365,  1562,   nil,   nil,
   nil,   -13,   369,   nil,   nil,  1378,   nil,   nil,   nil,  8802,
     7,    72,   nil,   918,   382,   360,   nil,   385,   826,   387,
   nil,   nil,   387,   nil,   nil,   389,   388,   550,   nil,   398,
   nil,   nil,   403,   372,   nil,   nil,   nil,   nil,   407,   nil,
   408,   410,   nil,   nil,   nil,   458,   nil,   366,   274,   nil,
   nil,   424,   425,   nil,   nil,   nil,    90,   nil,   nil,   nil,
   428,   nil,   429,   nil,   432,   nil,   nil,   nil,   nil,   403,
   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -275,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -275,  -275,  -185,   -33,   -34,   -35,   -36,  -275,  -275,  -275,
  -275,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,  -275,  -275,   -95,
   -99,  -275,  -275,  -275,  -275,  -275,  -275,  -275,  -275,  -275,
  -225,  -248,  -207,  -208,  -209,  -210,  -204,  -205,  -206,  -275,
  -275,  -275,  -221,  -222,  -223,  -224,  -275,  -227,  -275,  -240,
  -243,  -275,  -249,  -275,  -275,    -7,  -275,  -275,  -275,  -275,
  -275,  -275,  -275,  -275,  -135,  -275,  -275,  -275,  -275,  -275,
  -275,  -275,  -275,  -275,  -275,  -275,  -275,  -275,  -275,  -275,
  -275,  -275,  -275,  -275,  -275,   -93,  -275,  -130,  -274,  -274,
   -22,   -23,  -275,  -274,  -154,  -178,  -179,  -180,  -181,  -182,
  -183,  -184,  -185,  -275,  -151,  -152,   -47,  -185,   -48,   -55,
  -275,   -14,  -250,   -90,   -94,  -275,   -96,  -275,  -275,  -275,
  -275,  -106,  -275,  -275,  -274,  -274,  -275,  -275,  -250,  -165,
  -167,  -168,  -169,  -170,  -171,  -173,  -174,  -225,  -274,  -250,
  -212,  -250,  -214,  -275,  -217,  -218,  -275,  -226,  -275,  -231,
  -234,  -275,  -238,  -275,  -275,  -275,   494,    -6,    -9,   -11,
   -12,   -13,   -17,   -18,   -19,   -20,  -275,  -250,  -275,   -86,
   -87,   -88,  -268,  -261,  -267,  -255,  -136,  -139,  -207,  -208,
  -209,  -210,  -275,  -258,  -272,  -185,  -264,  -270,  -205,  -206,
  -254,  -259,  -260,  -262,  -263,  -265,  -273,   -37,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -49,   -50,   -51,
   -52,   -53,   -54,   -56,   -57,  -275,   -58,  -124,  -275,   -61,
  -250,  -100,  -135,  -134,  -275,  -133,  -275,  -252,  -275,   -28,
  -274,  -186,  -275,  -275,   -59,  -251,  -275,   -92,  -275,  -238,
  -275,  -101,  -275,  -104,  -250,  -189,  -191,  -192,  -193,  -194,
  -196,  -275,  -275,  -199,  -248,  -275,   -98,  -275,  -275,  -275,
  -275,  -275,  -275,  -275,  -162,  -274,  -251,  -275,  -275,  -275,
  -275,  -215,  -275,  -275,  -228,  -229,  -230,  -232,  -275,  -235,
  -236,  -237,  -239,  -250,  -241,  -244,  -246,  -247,    -8,  -275,
  -135,  -275,  -251,  -275,  -275,  -275,  -275,  -250,  -126,  -275,
  -251,  -250,  -138,  -140,  -141,  -142,  -143,  -275,  -255,  -256,
  -257,  -258,  -261,  -264,  -266,  -267,  -268,  -269,  -270,  -271,
  -272,  -131,  -132,  -275,  -253,  -135,  -275,  -157,  -275,  -187,
  -250,  -135,   -15,   -89,  -201,  -275,  -275,  -275,  -103,  -275,
  -251,  -275,  -197,  -198,  -275,  -275,   -97,  -275,  -109,  -275,
  -115,  -275,  -275,  -119,  -274,  -274,  -135,  -161,  -275,  -175,
  -275,  -166,  -172,  -274,  -211,  -213,  -216,  -219,  -220,  -233,
  -275,  -275,  -250,   -26,  -137,  -146,  -144,  -145,  -128,  -275,
  -251,   -60,   -62,  -275,   -25,   -29,  -250,  -274,  -158,  -159,
  -160,  -275,  -250,   -91,  -202,  -238,  -102,  -105,  -190,  -195,
  -275,  -109,  -108,  -275,  -275,  -115,  -114,  -275,  -275,  -275,
  -118,  -120,  -275,  -155,  -156,  -275,  -250,  -275,  -176,  -275,
  -242,  -245,  -275,   -30,  -125,  -127,  -129,   -27,  -275,  -188,
  -275,  -275,  -200,  -107,  -110,  -275,  -113,  -275,  -274,  -147,
  -148,  -275,  -275,  -164,  -177,   -24,   -31,  -153,  -150,  -203,
  -275,  -112,  -275,  -117,  -275,  -122,  -123,  -149,  -163,  -252,
  -111,  -116,  -121,   -32 ]

racc_goto_table = [
     2,   257,   136,   138,   139,   124,   161,   140,   163,   247,
   197,   146,   315,   250,   311,   177,   353,   142,   255,   255,
   283,   391,    85,   383,   274,   432,   356,   133,   120,   121,
   254,   256,   442,   445,   141,   452,   150,   152,   153,   169,
   171,   449,   404,   484,   382,   436,   464,   154,   155,   246,
   327,   418,   168,   388,   271,   283,   141,   141,   176,   313,
   392,   428,   373,   179,   372,   458,   184,   156,   415,   397,
   309,   310,     3,   188,   189,   190,   191,   307,   463,   196,
   227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   249,
   466,   365,   187,   253,   253,   267,   308,   258,   192,   193,
   194,   195,   306,   180,   182,   448,   441,     1,   nil,   285,
   260,   nil,   nil,   nil,   nil,   nil,   263,   nil,   nil,   266,
   124,   nil,   nil,   nil,   283,   nil,   141,   nil,   360,   nil,
   nil,   nil,   nil,   nil,   328,   295,   nil,   nil,   nil,   292,
   nil,   290,   291,   nil,   nil,   nil,   299,   293,   300,   nil,
   357,   nil,   nil,   nil,   161,   298,   163,   nil,   331,   nil,
   nil,   nil,   318,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   312,   138,   321,   319,   nil,   nil,   150,   152,
   153,   nil,   nil,   nil,   nil,   389,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   154,   155,   124,   nil,
   168,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   451,
   nil,   nil,   nil,   245,   nil,   nil,   402,   329,   nil,   nil,
   nil,   nil,   283,   nil,   161,   nil,   163,   399,   493,   nil,
   nil,   nil,   362,   364,   nil,   nil,   nil,   461,   nil,   nil,
   nil,   369,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   312,
   nil,   416,   367,   430,   249,   nil,   nil,   422,   nil,   nil,
   nil,   nil,   nil,   nil,   444,   444,   nil,   377,   379,   176,
   398,   nil,   nil,   444,   nil,   179,   nil,   nil,   nil,   nil,
   400,   nil,   446,   nil,   nil,   nil,   455,   nil,   405,   406,
   407,   408,   nil,   nil,   409,   412,   nil,   444,   413,   nil,
   nil,   nil,   nil,   nil,   nil,   423,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   161,   258,
   163,   nil,   nil,   nil,   nil,   nil,   nil,   421,   nil,   nil,
   nil,   419,   nil,   nil,   nil,   489,   429,   nil,   nil,   249,
   nil,   nil,   362,   nil,   nil,   nil,   nil,   249,   485,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   453,
   nil,   nil,   nil,   nil,   nil,   245,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   457,   nil,   nil,   nil,   nil,   nil,   460,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   150,   nil,
   nil,   nil,   nil,   412,   nil,   312,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   471,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   472,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   258,   nil,   nil,   nil,   480,   nil,   482,   486 ]

racc_goto_check = [
     2,    13,    10,    10,    10,    65,    42,     6,    41,    58,
    11,    45,    97,    22,    83,    90,    14,     8,    57,    57,
    43,    74,     5,    55,    50,    52,    70,    68,     9,     9,
    61,    61,    67,    67,     6,    12,    10,    10,    10,     8,
     8,    67,    62,    56,    54,    53,    51,    65,    65,    21,
    59,    71,    65,    73,    49,    43,     6,     6,     6,    50,
    76,    77,    78,     6,    80,    67,    10,    68,    16,    85,
    86,    87,     3,     6,     6,     6,     6,    91,    52,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    53,    83,     5,    10,    10,    45,    92,    10,     9,     9,
     9,     9,    94,    95,    96,    74,    55,     1,   nil,     8,
    66,   nil,   nil,   nil,   nil,   nil,    65,   nil,   nil,    15,
    65,   nil,   nil,   nil,    43,   nil,     6,   nil,    50,   nil,
   nil,   nil,   nil,   nil,    58,    15,   nil,   nil,   nil,    65,
   nil,    66,    66,   nil,   nil,   nil,    15,     2,    15,   nil,
    57,   nil,   nil,   nil,    42,    66,    41,   nil,    11,   nil,
   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,    10,    15,     2,   nil,   nil,    10,    10,
    10,   nil,   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    65,    65,    65,   nil,
    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    97,
   nil,   nil,   nil,    10,   nil,   nil,    11,    15,   nil,   nil,
   nil,   nil,    43,   nil,    42,   nil,    41,    90,    14,   nil,
   nil,   nil,     6,    10,   nil,   nil,   nil,    83,   nil,   nil,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,    11,     2,    22,    10,   nil,   nil,    11,   nil,   nil,
   nil,   nil,   nil,   nil,    57,    57,   nil,     2,     2,     6,
     6,   nil,   nil,    57,   nil,     6,   nil,   nil,   nil,   nil,
    15,   nil,    11,   nil,   nil,   nil,    58,   nil,    10,    10,
    10,    10,   nil,   nil,    15,    10,   nil,    57,    15,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,    10,
    41,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   nil,    65,   nil,   nil,   nil,    13,    10,   nil,   nil,    10,
   nil,   nil,     6,   nil,   nil,   nil,   nil,    10,    57,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,    10,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   117,     0,    72,   nil,    18,   -13,   nil,   -30,    18,
   -15,   -84,  -367,  -121,  -241,   -13,  -286,   nil,   nil,   nil,
   nil,   -64,  -101,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -50,   -52,  -128,   nil,   -38,   nil,   nil,   nil,   -93,
  -124,  -387,  -353,  -335,  -245,  -266,  -425,  -100,  -104,  -198,
   nil,   -88,  -280,   nil,   nil,    -7,    -3,  -352,    11,   nil,
  -234,  -307,   nil,  -242,  -275,   nil,  -237,  -309,  -220,   nil,
  -217,   nil,   nil,  -168,   nil,  -233,  -111,  -110,   nil,   nil,
   -61,  -101,   -72,   nil,   -66,    35,    35,  -172 ]

racc_goto_default = [
   nil,   nil,   443,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   259,    13,    14,    15,
    16,   nil,   381,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    47,   nil,    49,    50,   147,   nil,
   nil,   151,   nil,   nil,   nil,   nil,   nil,   261,   nil,   nil,
   117,   nil,   206,   212,   207,    56,   nil,   nil,   nil,   123,
   nil,   nil,   158,   nil,   159,   160,   164,   275,   276,   277,
   278,   279,   282,   nil,   173,   175,    72,    73,    74,    76,
   nil,   nil,   nil,   178,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 100, :_reduce_1,
  1, 100, :_reduce_2,
  0, 100, :_reduce_3,
  1, 101, :_reduce_4,
  1, 103, :_reduce_5,
  3, 103, :_reduce_6,
  2, 103, :_reduce_7,
  1, 104, :_reduce_8,
  3, 104, :_reduce_9,
  1, 105, :_reduce_none,
  3, 105, :_reduce_11,
  3, 105, :_reduce_12,
  3, 105, :_reduce_13,
  1, 107, :_reduce_14,
  3, 107, :_reduce_15,
  1, 106, :_reduce_none,
  3, 106, :_reduce_17,
  3, 106, :_reduce_18,
  3, 106, :_reduce_19,
  3, 106, :_reduce_20,
  1, 108, :_reduce_none,
  2, 108, :_reduce_22,
  2, 108, :_reduce_23,
  7, 108, :_reduce_24,
  5, 108, :_reduce_25,
  5, 108, :_reduce_26,
  4, 115, :_reduce_27,
  1, 112, :_reduce_28,
  3, 112, :_reduce_29,
  1, 111, :_reduce_30,
  2, 111, :_reduce_31,
  4, 111, :_reduce_32,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  3, 109, :_reduce_37,
  3, 109, :_reduce_38,
  3, 109, :_reduce_39,
  3, 109, :_reduce_40,
  3, 109, :_reduce_41,
  3, 109, :_reduce_42,
  3, 109, :_reduce_43,
  3, 109, :_reduce_44,
  3, 109, :_reduce_45,
  3, 109, :_reduce_46,
  2, 109, :_reduce_47,
  2, 109, :_reduce_48,
  3, 109, :_reduce_49,
  3, 109, :_reduce_50,
  3, 109, :_reduce_51,
  3, 109, :_reduce_52,
  3, 109, :_reduce_53,
  3, 109, :_reduce_54,
  2, 109, :_reduce_55,
  3, 109, :_reduce_56,
  3, 109, :_reduce_57,
  3, 109, :_reduce_58,
  3, 109, :_reduce_59,
  5, 119, :_reduce_60,
  1, 121, :_reduce_61,
  3, 121, :_reduce_62,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_84,
  1, 116, :_reduce_85,
  1, 116, :_reduce_86,
  1, 116, :_reduce_87,
  1, 116, :_reduce_88,
  4, 118, :_reduce_89,
  2, 118, :_reduce_90,
  5, 118, :_reduce_91,
  3, 118, :_reduce_92,
  2, 143, :_reduce_93,
  2, 143, :_reduce_94,
  1, 123, :_reduce_95,
  2, 123, :_reduce_96,
  4, 145, :_reduce_97,
  3, 145, :_reduce_98,
  1, 145, :_reduce_99,
  3, 146, :_reduce_100,
  2, 144, :_reduce_101,
  3, 148, :_reduce_102,
  2, 148, :_reduce_103,
  2, 147, :_reduce_104,
  4, 147, :_reduce_105,
  2, 126, :_reduce_106,
  5, 150, :_reduce_107,
  4, 150, :_reduce_108,
  0, 151, :_reduce_none,
  2, 151, :_reduce_110,
  4, 151, :_reduce_111,
  3, 151, :_reduce_112,
  6, 127, :_reduce_113,
  5, 127, :_reduce_114,
  0, 152, :_reduce_none,
  4, 152, :_reduce_116,
  3, 152, :_reduce_117,
  5, 125, :_reduce_118,
  1, 153, :_reduce_119,
  2, 153, :_reduce_120,
  5, 154, :_reduce_121,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 120, :_reduce_none,
  4, 120, :_reduce_125,
  1, 158, :_reduce_126,
  3, 158, :_reduce_127,
  3, 157, :_reduce_128,
  6, 124, :_reduce_129,
  2, 124, :_reduce_130,
  3, 159, :_reduce_131,
  3, 159, :_reduce_132,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  0, 110, :_reduce_135,
  1, 110, :_reduce_136,
  3, 110, :_reduce_137,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 161, :_reduce_144,
  3, 161, :_reduce_145,
  3, 161, :_reduce_146,
  6, 128, :_reduce_147,
  6, 129, :_reduce_148,
  7, 117, :_reduce_149,
  7, 117, :_reduce_150,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  7, 130, :_reduce_153,
  1, 168, :_reduce_154,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 169, :_reduce_none,
  2, 169, :_reduce_158,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  4, 132, :_reduce_161,
  3, 132, :_reduce_162,
  7, 131, :_reduce_163,
  6, 131, :_reduce_164,
  1, 171, :_reduce_165,
  3, 171, :_reduce_166,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_169,
  1, 173, :_reduce_none,
  1, 174, :_reduce_171,
  3, 174, :_reduce_172,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 172, :_reduce_none,
  2, 172, :_reduce_176,
  6, 134, :_reduce_177,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_185,
  1, 165, :_reduce_186,
  2, 165, :_reduce_187,
  4, 165, :_reduce_188,
  1, 149, :_reduce_189,
  3, 149, :_reduce_190,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  3, 179, :_reduce_195,
  1, 179, :_reduce_196,
  2, 180, :_reduce_197,
  2, 178, :_reduce_198,
  1, 181, :_reduce_199,
  4, 181, :_reduce_200,
  4, 135, :_reduce_201,
  5, 136, :_reduce_202,
  7, 136, :_reduce_203,
  1, 122, :_reduce_204,
  1, 137, :_reduce_205,
  1, 137, :_reduce_206,
  1, 137, :_reduce_207,
  1, 137, :_reduce_208,
  1, 137, :_reduce_209,
  1, 137, :_reduce_210,
  4, 138, :_reduce_211,
  2, 138, :_reduce_212,
  4, 138, :_reduce_213,
  2, 138, :_reduce_214,
  3, 139, :_reduce_215,
  4, 139, :_reduce_216,
  2, 139, :_reduce_217,
  1, 183, :_reduce_218,
  3, 183, :_reduce_219,
  3, 184, :_reduce_220,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 185, :_reduce_224,
  1, 185, :_reduce_225,
  2, 186, :_reduce_226,
  1, 188, :_reduce_227,
  1, 190, :_reduce_228,
  1, 191, :_reduce_229,
  2, 189, :_reduce_230,
  1, 192, :_reduce_231,
  1, 193, :_reduce_232,
  2, 193, :_reduce_233,
  2, 187, :_reduce_234,
  2, 194, :_reduce_235,
  2, 194, :_reduce_236,
  3, 102, :_reduce_237,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  0, 195, :_reduce_240,
  2, 195, :_reduce_241,
  4, 195, :_reduce_242,
  1, 133, :_reduce_243,
  3, 133, :_reduce_244,
  5, 133, :_reduce_245,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 142, :_reduce_248,
  1, 140, :_reduce_249,
  0, 114, :_reduce_none,
  1, 114, :_reduce_251,
  0, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  0, 156, :_reduce_274 ]

racc_reduce_n = 275

racc_shift_n = 494

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :TYPE => 83,
  :PRIVATE => 84,
  :ATTR => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :SITE_R => 89,
  :APPLICATION => 90,
  :PRODUCES => 91,
  :CONSUMES => 92,
  :SITE => 93,
  :LOW => 94,
  :HIGH => 95,
  :LISTSTART => 96,
  :SPLAT => 97,
  :MODULO => 98 }

racc_nt_base = 99

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "SITE_R",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "optional_statements",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_59(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_60(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_61(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_62(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_84(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_85(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_86(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_87(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_88(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_89(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_90(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_91(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_92(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_93(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_94(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_95(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_96(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_97(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_98(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_99(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_100(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_101(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_102(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 322)
  def _reduce_103(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_104(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_105(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 335)
  def _reduce_106(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 342)
  def _reduce_107(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_108(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_110(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 358)
  def _reduce_111(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_112(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 369)
  def _reduce_113(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_114(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 115 omitted

module_eval(<<'.,.,', 'egrammar.ra', 383)
  def _reduce_116(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_117(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 394)
  def _reduce_118(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 400)
  def _reduce_119(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 401)
  def _reduce_120(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 406)
  def _reduce_121(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_125(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_126(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_127(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_128(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_129(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_130(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_131(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_132(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_135(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_136(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_137(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_144(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_145(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 491)
  def _reduce_146(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 500)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 511)
  def _reduce_148(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 517)
  def _reduce_149(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_150(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 541)
  def _reduce_153(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 551)
  def _reduce_154(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'egrammar.ra', 560)
  def _reduce_158(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_161(val, _values, result)
        result = add_definition(Factory.SITE(val[2]))
    loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_162(val, _values, result)
        result = add_definition(Factory.SITE(nil))
    loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_163(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_164(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 605)
  def _reduce_165(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_166(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_169(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_171(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_172(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_176(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_177(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_185(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_186(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_187(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_188(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_189(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_190(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_195(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_196(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_197(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_198(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_199(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_200(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_201(val, _values, result)
          result = add_definition(Factory.TYPE_ALIAS(val[1][:value], val[3]))
      loc(result, val[0], val[3])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_202(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], nil, val[3]))
        loc(result, val[0], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_203(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5]))
        loc(result, val[0], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_204(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_205(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_206(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_207(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_208(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_209(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_210(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_211(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_212(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_213(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_214(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_215(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_216(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 730)
  def _reduce_217(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_218(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_219(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_220(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

module_eval(<<'.,.,', 'egrammar.ra', 745)
  def _reduce_224(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 746)
  def _reduce_225(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 748)
  def _reduce_226(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 749)
  def _reduce_227(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 750)
  def _reduce_228(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 751)
  def _reduce_229(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 752)
  def _reduce_230(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 753)
  def _reduce_231(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 756)
  def _reduce_232(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 757)
  def _reduce_233(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 760)
  def _reduce_234(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 763)
  def _reduce_235(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 764)
  def _reduce_236(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 767)
  def _reduce_237(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 238 omitted

# reduce 239 omitted

module_eval(<<'.,.,', 'egrammar.ra', 774)
  def _reduce_240(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 775)
  def _reduce_241(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 776)
  def _reduce_242(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 779)
  def _reduce_243(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 780)
  def _reduce_244(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 781)
  def _reduce_245(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'egrammar.ra', 787)
  def _reduce_248(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 790)
  def _reduce_249(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 250 omitted

module_eval(<<'.,.,', 'egrammar.ra', 796)
  def _reduce_251(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

module_eval(<<'.,.,', 'egrammar.ra', 825)
  def _reduce_274(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
